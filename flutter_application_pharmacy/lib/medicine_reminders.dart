// import 'package:flutter/material.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:flutter_application_pharmacy/models/reminders.dart';
// import 'package:flutter_application_pharmacy/models/user_model';
// import 'home_page.dart';
// import 'reports.dart';
// import 'package:flutter_application_pharmacy/profile_page.dart';
// import 'package:flutter_application_pharmacy/widgets/custom_bottom_nav_bar.dart';
// import 'package:provider/provider.dart';

// class MedicineReminder extends StatefulWidget {
//   final String userName;

//   const MedicineReminder({super.key, required this.userName});

//   @override
//   _MedicineReminderState createState() => _MedicineReminderState();
// }

// class _MedicineReminderState extends State<MedicineReminder>
//     with SingleTickerProviderStateMixin {
//   List<Reminder> _reminders = [];
//   final TextEditingController _medicineController = TextEditingController();
//   final TextEditingController _dosageController = TextEditingController();
//   List<TimeOfDay> _selectedTimes = [];
//   bool _isDaily = true;
//   Map<int, bool> _takenStatus = {};
//   String? _docId; // Autogenerated docId for the current user
//   String? _linkedDocId; // For caretakers, linked patient's docId
//   bool _isLoading = true;
//   int _currentIndex = 2; // MedicineReminder is index 2

//   late AnimationController _animationController;
//   late Animation<double> _fadeAnimation;

//   @override
//   void initState() {
//     super.initState();
//     _animationController = AnimationController(
//       vsync: this,
//       duration: const Duration(milliseconds: 500),
//     );
//     _fadeAnimation = CurvedAnimation(
//       parent: _animationController,
//       curve: Curves.easeInOut,
//     );
//     _animationController.forward();
//     WidgetsBinding.instance.addPostFrameCallback((_) async {
//       await _fetchUserDataAndLoadReminders();
//     });
//   }

//   @override
//   void dispose() {
//     _animationController.dispose();
//     _medicineController.dispose();
//     _dosageController.dispose();
//     super.dispose();
//   }

//   Future<void> _fetchUserDataAndLoadReminders() async {
//     setState(() => _isLoading = true);
//     User? user = FirebaseAuth.instance.currentUser;
//     if (user == null) {
//       print("No authenticated user found");
//       setState(() => _isLoading = false);
//       return;
//     }

//     try {
//       QuerySnapshot userQuery =
//           await FirebaseFirestore.instance
//               .collection('users')
//               .where('email', isEqualTo: user.email)
//               .limit(1)
//               .get();

//       if (userQuery.docs.isNotEmpty && mounted) {
//         DocumentSnapshot snapshot = userQuery.docs.first;
//         _docId = snapshot.id;
//         final userModel = Provider.of<UserModel>(context, listen: false);
//         final data =
//             snapshot.data() as Map<String, dynamic>?; // Get data as map
//         setState(() {
//           _linkedDocId =
//               data != null && data.containsKey('linkedDocId')
//                   ? data['linkedDocId'] ?? ''
//                   : ''; // Safely check for linkedDocId
//           _isLoading = false;
//         });
//         userModel.updateName(widget.userName);
//         print(
//           "User data fetched: ${widget.userName}, Role: ${snapshot.get('role')}, DocId: $_docId, LinkedDocId: $_linkedDocId",
//         );
//         await _loadReminders();
//       } else if (mounted) {
//         setState(() => _isLoading = false);
//         print("No user document found for email: ${user.email}");
//       }
//     } catch (e) {
//       print("Firestore fetch error: $e");
//       if (mounted) {
//         setState(() => _isLoading = false);
//         ScaffoldMessenger.of(
//           context,
//         ).showSnackBar(SnackBar(content: Text('Error fetching data: $e')));
//       }
//     }
//   }

//   Future<void> _loadReminders() async {
//     if (_docId == null) return;
//     try {
//       QuerySnapshot snapshot =
//           await FirebaseFirestore.instance
//               .collection('users')
//               .doc(_docId)
//               .collection('reminders')
//               .get();

//       setState(() {
//         _reminders =
//             snapshot.docs
//                 .map((doc) => Reminder.fromFirestore(doc, context))
//                 .toList();
//         for (var doc in snapshot.docs) {
//           _takenStatus[int.parse(doc.id)] =
//               (doc.data() as Map<String, dynamic>)['taken'] ?? false;
//         }
//       });
//       print("Loaded ${_reminders.length} reminders for docId: $_docId");
//     } catch (e) {
//       print("Error loading reminders: $e");
//       ScaffoldMessenger.of(
//         context,
//       ).showSnackBar(SnackBar(content: Text('Error loading reminders: $e')));
//     }
//   }

//   Future<void> _saveReminder(Reminder reminder) async {
//     if (_docId == null) return;
//     final userModel = Provider.of<UserModel>(context, listen: false);
//     final isCaretaker = userModel.role == 'Caretaker';

//     try {
//       await FirebaseFirestore.instance
//           .collection('users')
//           .doc(_docId)
//           .collection('reminders')
//           .doc(reminder.id.toString())
//           .set({
//             ...reminder.toFirestore(context),
//             'taken': _takenStatus[reminder.id] ?? false,
//           }, SetOptions(merge: true));

//       if (isCaretaker && _linkedDocId != null && _linkedDocId!.isNotEmpty) {
//         await FirebaseFirestore.instance
//             .collection('users')
//             .doc(_linkedDocId)
//             .collection('reminders')
//             .doc(reminder.id.toString())
//             .set({
//               ...reminder.toFirestore(context),
//               'taken': _takenStatus[reminder.id] ?? false,
//               'addedBy': _docId,
//             }, SetOptions(merge: true));
//       }
//     } catch (e) {
//       print("Error saving reminder: $e");
//       ScaffoldMessenger.of(
//         context,
//       ).showSnackBar(SnackBar(content: Text('Error saving reminder: $e')));
//     }
//   }

//   Future<void> _deleteReminder(int id) async {
//     if (_docId == null) return;
//     final userModel = Provider.of<UserModel>(context, listen: false);
//     final isCaretaker = userModel.role == 'Caretaker';

//     try {
//       await FirebaseFirestore.instance
//           .collection('users')
//           .doc(_docId)
//           .collection('reminders')
//           .doc(id.toString())
//           .delete();

//       if (isCaretaker && _linkedDocId != null && _linkedDocId!.isNotEmpty) {
//         await FirebaseFirestore.instance
//             .collection('users')
//             .doc(_linkedDocId)
//             .collection('reminders')
//             .doc(id.toString())
//             .delete();
//       }
//     } catch (e) {
//       print("Error deleting reminder: $e");
//       ScaffoldMessenger.of(
//         context,
//       ).showSnackBar(SnackBar(content: Text('Error deleting reminder: $e')));
//     }
//   }

//   void _addReminder() {
//     if (_medicineController.text.isEmpty ||
//         _dosageController.text.isEmpty ||
//         _selectedTimes.isEmpty) {
//       ScaffoldMessenger.of(
//         context,
//       ).showSnackBar(const SnackBar(content: Text('Please fill all fields')));
//       return;
//     }

//     final reminder = Reminder(
//       id: _reminders.isEmpty ? 1 : _reminders.last.id + 1,
//       medicine: _medicineController.text,
//       dosage: _dosageController.text,
//       times: _selectedTimes,
//       isDaily: _isDaily,
//       timestamp: Timestamp.now(),
//     );

//     setState(() {
//       _reminders.add(reminder);
//       _takenStatus[reminder.id] = false;
//       _medicineController.clear();
//       _dosageController.clear();
//       _selectedTimes = [];
//       _isDaily = true;
//     });

//     _saveReminder(reminder);
//     Navigator.pop(context);
//   }

//   Future<void> _showAddReminderDialog() async {
//     final userModel = Provider.of<UserModel>(context, listen: false);
//     final isCaretaker = userModel.role == 'Caretaker';

//     if (isCaretaker && (_linkedDocId == null || _linkedDocId!.isEmpty)) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(content: Text('Link a patient first to add reminders')),
//       );
//       return;
//     }

//     await showDialog(
//       context: context,
//       builder:
//           (context) => StatefulBuilder(
//             builder:
//                 (context, setState) => AlertDialog(
//                   shape: RoundedRectangleBorder(
//                     borderRadius: BorderRadius.circular(20),
//                   ),
//                   title: const Text('Add Medicine Reminder'),
//                   content: SingleChildScrollView(
//                     child: Column(
//                       mainAxisSize: MainAxisSize.min,
//                       children: [
//                         TextField(
//                           controller: _medicineController,
//                           decoration: InputDecoration(
//                             labelText: 'Medicine Name',
//                           ),
//                         ),
//                         const SizedBox(height: 16),
//                         TextField(
//                           controller: _dosageController,
//                           decoration: InputDecoration(
//                             labelText: 'Dosage (e.g., 1 pill)',
//                           ),
//                         ),
//                         const SizedBox(height: 16),
//                         ElevatedButton(
//                           onPressed: () async {
//                             final time = await showTimePicker(
//                               context: context,
//                               initialTime: TimeOfDay.now(),
//                             );
//                             if (time != null && !_selectedTimes.contains(time))
//                               setState(() => _selectedTimes.add(time));
//                           },
//                           child: const Text('Add Time'),
//                         ),
//                         Wrap(
//                           children:
//                               _selectedTimes
//                                   .map(
//                                     (time) => Chip(
//                                       label: Text(time.format(context)),
//                                       onDeleted:
//                                           () => setState(
//                                             () => _selectedTimes.remove(time),
//                                           ),
//                                     ),
//                                   )
//                                   .toList(),
//                         ),
//                         Row(
//                           children: [
//                             const Text('Repeat Daily'),
//                             Switch(
//                               value: _isDaily,
//                               onChanged:
//                                   (value) => setState(() => _isDaily = value),
//                             ),
//                           ],
//                         ),
//                       ],
//                     ),
//                   ),
//                   actions: [
//                     TextButton(
//                       onPressed: () => Navigator.pop(context),
//                       child: const Text('Cancel'),
//                     ),
//                     ElevatedButton(
//                       onPressed: _addReminder,
//                       child: const Text('Save'),
//                     ),
//                   ],
//                 ),
//           ),
//     );
//   }

//   void _onNavBarTap(int index) {
//     if (index == _currentIndex) return;
//     setState(() => _currentIndex = index);
//     switch (index) {
//       case 0:
//         Navigator.pushReplacement(
//           context,
//           MaterialPageRoute(
//             builder: (context) => HomePage(userName: widget.userName),
//           ),
//         );
//         break;
//       case 1:
//         Navigator.pushReplacement(
//           context,
//           MaterialPageRoute(
//             builder: (context) => ReportsPage(userName: widget.userName),
//           ),
//         );
//         break;
//       case 2:
//         // Already on MedicineReminder, no navigation needed
//         break;
//       case 3:
//         Navigator.pushReplacement(
//           context,
//           MaterialPageRoute(
//             builder: (context) => ProfilePage(userName: widget.userName),
//           ),
//         );
//         break;
//     }
//   }

//   // Handle system back button to navigate to HomePage
//   Future<bool> _onWillPop() async {
//     Navigator.pushReplacement(
//       context,
//       MaterialPageRoute(
//         builder: (context) => HomePage(userName: widget.userName),
//       ),
//     );
//     return false; // Prevent default back behavior after navigation
//   }

//   @override
//   Widget build(BuildContext context) {
//     final userModel = Provider.of<UserModel>(context);
//     final isCaretaker = userModel.role == 'Caretaker';
//     final isPatient = userModel.role == 'Patient';

//     return WillPopScope(
//       onWillPop: _onWillPop, // Intercept system back button
//       child: Scaffold(
//         backgroundColor: Colors.white,
//         appBar: AppBar(
//           toolbarHeight: 56, // Match ReportsPage height
//           title: const Text(
//             'Medicine Reminders',
//             style: TextStyle(
//               fontSize: 22, // Match ReportsPage text size
//               fontWeight: FontWeight.w600, // Match ReportsPage font weight
//               color: Colors.white, // Match ReportsPage text color
//             ),
//           ),
//           centerTitle: true, // Match ReportsPage alignment
//           backgroundColor: Colors.blueAccent,
//           elevation: 0, // Match ReportsPage elevation
//           flexibleSpace: Container(
//             decoration: const BoxDecoration(
//               gradient: LinearGradient(
//                 colors: [
//                   Colors.blueAccent,
//                   Colors.lightBlueAccent,
//                 ], // Match ReportsPage gradient
//                 begin: Alignment.topLeft,
//                 end: Alignment.bottomRight,
//               ),
//             ),
//           ),
//         ),
//         body:
//             _isLoading
//                 ? const Center(child: CircularProgressIndicator())
//                 : Padding(
//                   padding: const EdgeInsets.all(16),
//                   child:
//                       _reminders.isEmpty
//                           ? const Center(child: Text('No reminders set yet.'))
//                           : RefreshIndicator(
//                             onRefresh: _loadReminders,
//                             child: ListView.builder(
//                               itemCount: _reminders.length,
//                               itemBuilder: (context, index) {
//                                 final reminder = _reminders[index];
//                                 return FadeTransition(
//                                   opacity: _fadeAnimation,
//                                   child: Card(
//                                     elevation: 2,
//                                     shape: RoundedRectangleBorder(
//                                       borderRadius: BorderRadius.circular(10),
//                                     ),
//                                     child: Padding(
//                                       padding: const EdgeInsets.all(16),
//                                       child: Row(
//                                         children: [
//                                           const Icon(
//                                             Icons.medication,
//                                             color: Colors.blueAccent,
//                                           ),
//                                           const SizedBox(width: 12),
//                                           Expanded(
//                                             child: Column(
//                                               crossAxisAlignment:
//                                                   CrossAxisAlignment.start,
//                                               children: [
//                                                 Text(
//                                                   reminder.medicine,
//                                                   style: const TextStyle(
//                                                     fontWeight: FontWeight.bold,
//                                                     fontSize: 18,
//                                                   ),
//                                                 ),
//                                                 Text(
//                                                   '${reminder.dosage} • ${reminder.times.map((t) => t.format(context)).join(', ')}',
//                                                   style: const TextStyle(
//                                                     color: Colors.grey,
//                                                     fontSize: 14,
//                                                   ),
//                                                 ),
//                                                 Text(
//                                                   '(${reminder.isDaily ? "Daily" : "Weekly"})',
//                                                   style: const TextStyle(
//                                                     color: Colors.grey,
//                                                     fontSize: 12,
//                                                   ),
//                                                 ),
//                                                 if (isCaretaker) // Only show checkbox for Caretakers
//                                                   Row(
//                                                     children: [
//                                                       Checkbox(
//                                                         value:
//                                                             _takenStatus[reminder
//                                                                 .id] ??
//                                                             false,
//                                                         onChanged: (
//                                                           bool? value,
//                                                         ) {
//                                                           setState(() {
//                                                             _takenStatus[reminder
//                                                                     .id] =
//                                                                 value ?? false;
//                                                           });
//                                                           _saveReminder(
//                                                             reminder,
//                                                           );
//                                                         },
//                                                       ),
//                                                       const Text('Taken'),
//                                                     ],
//                                                   ),
//                                               ],
//                                             ),
//                                           ),
//                                           if (isCaretaker)
//                                             IconButton(
//                                               icon: const Icon(
//                                                 Icons.delete,
//                                                 color: Colors.red,
//                                               ),
//                                               onPressed:
//                                                   () => setState(() {
//                                                     _reminders.removeAt(index);
//                                                     _takenStatus.remove(
//                                                       reminder.id,
//                                                     );
//                                                     _deleteReminder(
//                                                       reminder.id,
//                                                     );
//                                                   }),
//                                             ),
//                                         ],
//                                       ),
//                                     ),
//                                   ),
//                                 );
//                               },
//                             ),
//                           ),
//                 ),
//         floatingActionButton:
//             isCaretaker
//                 ? FloatingActionButton(
//                   onPressed: _showAddReminderDialog,
//                   backgroundColor: Colors.blueAccent,
//                   child: const Icon(Icons.add),
//                 )
//                 : null, // No FAB for patients
//         bottomNavigationBar: CustomBottomNavBar(
//           currentIndex: _currentIndex,
//           onTap: _onNavBarTap,
//         ),
//       ),
//     );
//   }
// }
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_application_pharmacy/home_page.dart';
import 'package:flutter_application_pharmacy/models/reminders.dart';
import 'package:flutter_application_pharmacy/models/user_model.dart';
import 'package:provider/provider.dart';

class MedicineReminder extends StatefulWidget {
  final String userName;

  const MedicineReminder({super.key, required this.userName});

  @override
  _MedicineReminderState createState() => _MedicineReminderState();
}

class _MedicineReminderState extends State<MedicineReminder>
    with SingleTickerProviderStateMixin {
  List<Reminder> _reminders = [];
  final TextEditingController _medicineController = TextEditingController();
  final TextEditingController _dosageController = TextEditingController();
  List<TimeOfDay> _selectedTimes = [];
  bool _isDaily = true;
  Map<int, bool> _takenStatus = {};
  String? _docId; // Autogenerated docId for the current user
  String? _linkedDocId; // For caretakers, linked patient's docId
  bool _isLoading = true;

  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );
    _fadeAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    );
    _animationController.forward();
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await _fetchUserDataAndLoadReminders();
    });
  }

  @override
  void dispose() {
    _animationController.dispose();
    _medicineController.dispose();
    _dosageController.dispose();
    super.dispose();
  }

  Future<void> _fetchUserDataAndLoadReminders() async {
    setState(() => _isLoading = true);
    User? user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      print("No authenticated user found");
      setState(() => _isLoading = false);
      return;
    }

    try {
      QuerySnapshot userQuery =
          await FirebaseFirestore.instance
              .collection('users')
              .where('email', isEqualTo: user.email)
              .limit(1)
              .get();

      if (userQuery.docs.isNotEmpty && mounted) {
        DocumentSnapshot snapshot = userQuery.docs.first;
        _docId = snapshot.id;
        final userModel = Provider.of<UserModel>(context, listen: false);
        final data =
            snapshot.data() as Map<String, dynamic>?; // Get data as map
        setState(() {
          _linkedDocId =
              data != null && data.containsKey('linkedDocId')
                  ? data['linkedDocId'] ?? ''
                  : ''; // Safely check for linkedDocId
          _isLoading = false;
        });
        userModel.updateName(widget.userName);
        print(
          "User data fetched: ${widget.userName}, Role: ${snapshot.get('role')}, DocId: $_docId, LinkedDocId: $_linkedDocId",
        );
        await _loadReminders();
      } else if (mounted) {
        setState(() => _isLoading = false);
        print("No user document found for email: ${user.email}");
      }
    } catch (e) {
      print("Firestore fetch error: $e");
      if (mounted) {
        setState(() => _isLoading = false);
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error fetching data: $e')));
      }
    }
  }

  Future<void> _loadReminders() async {
    if (_docId == null) return;
    try {
      QuerySnapshot snapshot =
          await FirebaseFirestore.instance
              .collection('users')
              .doc(_docId)
              .collection('reminders')
              .get();

      setState(() {
        _reminders =
            snapshot.docs
                .map((doc) => Reminder.fromFirestore(doc, context))
                .toList();
        for (var doc in snapshot.docs) {
          _takenStatus[int.parse(doc.id)] =
              (doc.data() as Map<String, dynamic>)['taken'] ?? false;
        }
      });
      print("Loaded ${_reminders.length} reminders for docId: $_docId");
    } catch (e) {
      print("Error loading reminders: $e");
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error loading reminders: $e')));
    }
  }

  Future<void> _saveReminder(Reminder reminder) async {
    if (_docId == null) return;
    final userModel = Provider.of<UserModel>(context, listen: false);
    final isCaretaker = userModel.role == 'Caretaker';

    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(_docId)
          .collection('reminders')
          .doc(reminder.id.toString())
          .set({
            ...reminder.toFirestore(context),
            'taken': _takenStatus[reminder.id] ?? false,
          }, SetOptions(merge: true));

      if (isCaretaker && _linkedDocId != null && _linkedDocId!.isNotEmpty) {
        await FirebaseFirestore.instance
            .collection('users')
            .doc(_linkedDocId)
            .collection('reminders')
            .doc(reminder.id.toString())
            .set({
              ...reminder.toFirestore(context),
              'taken': _takenStatus[reminder.id] ?? false,
              'addedBy': _docId,
            }, SetOptions(merge: true));
      }
    } catch (e) {
      print("Error saving reminder: $e");
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error saving reminder: $e')));
    }
  }

  Future<void> _deleteReminder(int id) async {
    if (_docId == null) return;
    final userModel = Provider.of<UserModel>(context, listen: false);
    final isCaretaker = userModel.role == 'Caretaker';

    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc(_docId)
          .collection('reminders')
          .doc(id.toString())
          .delete();

      if (isCaretaker && _linkedDocId != null && _linkedDocId!.isNotEmpty) {
        await FirebaseFirestore.instance
            .collection('users')
            .doc(_linkedDocId)
            .collection('reminders')
            .doc(id.toString())
            .delete();
      }
    } catch (e) {
      print("Error deleting reminder: $e");
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error deleting reminder: $e')));
    }
  }

  void _addReminder() {
    if (_medicineController.text.isEmpty ||
        _dosageController.text.isEmpty ||
        _selectedTimes.isEmpty) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Please fill all fields')));
      return;
    }

    final reminder = Reminder(
      id: _reminders.isEmpty ? 1 : _reminders.last.id + 1,
      medicine: _medicineController.text,
      dosage: _dosageController.text,
      times: _selectedTimes,
      isDaily: _isDaily,
      timestamp: Timestamp.now(),
    );

    setState(() {
      _reminders.add(reminder);
      _takenStatus[reminder.id] = false;
      _medicineController.clear();
      _dosageController.clear();
      _selectedTimes = [];
      _isDaily = true;
    });

    _saveReminder(reminder);
    Navigator.pop(context);
  }

  Future<void> _showAddReminderDialog() async {
    final userModel = Provider.of<UserModel>(context, listen: false);
    final isCaretaker = userModel.role == 'Caretaker';

    if (isCaretaker && (_linkedDocId == null || _linkedDocId!.isEmpty)) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Link a patient first to add reminders')),
      );
      return;
    }

    await showDialog(
      context: context,
      builder:
          (context) => StatefulBuilder(
            builder:
                (context, setState) => AlertDialog(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(20),
                  ),
                  title: const Text('Add Medicine Reminder'),
                  content: SingleChildScrollView(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        TextField(
                          controller: _medicineController,
                          decoration: InputDecoration(
                            labelText: 'Medicine Name',
                          ),
                        ),
                        const SizedBox(height: 16),
                        TextField(
                          controller: _dosageController,
                          decoration: InputDecoration(
                            labelText: 'Dosage (e.g., 1 pill)',
                          ),
                        ),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: () async {
                            final time = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.now(),
                            );
                            if (time != null && !_selectedTimes.contains(time))
                              setState(() => _selectedTimes.add(time));
                          },
                          child: const Text('Add Time'),
                        ),
                        Wrap(
                          children:
                              _selectedTimes
                                  .map(
                                    (time) => Chip(
                                      label: Text(time.format(context)),
                                      onDeleted:
                                          () => setState(
                                            () => _selectedTimes.remove(time),
                                          ),
                                    ),
                                  )
                                  .toList(),
                        ),
                        Row(
                          children: [
                            const Text('Repeat Daily'),
                            Switch(
                              value: _isDaily,
                              onChanged:
                                  (value) => setState(() => _isDaily = value),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: const Text('Cancel'),
                    ),
                    ElevatedButton(
                      onPressed: _addReminder,
                      child: const Text('Save'),
                    ),
                  ],
                ),
          ),
    );
  }

  // Handle system back button to navigate to HomePage
  Future<bool> _onWillPop() async {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => HomePage(userName: widget.userName),
      ),
    );
    return false; // Prevent default back behavior after navigation
  }

  @override
  Widget build(BuildContext context) {
    final userModel = Provider.of<UserModel>(context);
    final isCaretaker = userModel.role == 'Caretaker';
    final isPatient = userModel.role == 'Patient';

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          toolbarHeight: 56,
          title: const Text(
            'Medicine Reminders',
            style: TextStyle(
              fontSize: 22,
              fontWeight: FontWeight.w600,
              color: Colors.white,
            ),
          ),
          centerTitle: true,
          backgroundColor: Colors.blueAccent,
          elevation: 0,
          flexibleSpace: Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.blueAccent, Colors.lightBlueAccent],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
        ),
        body:
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : Padding(
                  padding: const EdgeInsets.all(16),
                  child:
                      _reminders.isEmpty
                          ? const Center(child: Text('No reminders set yet.'))
                          : RefreshIndicator(
                            onRefresh: _loadReminders,
                            child: ListView.builder(
                              itemCount: _reminders.length,
                              itemBuilder: (context, index) {
                                final reminder = _reminders[index];
                                return FadeTransition(
                                  opacity: _fadeAnimation,
                                  child: Card(
                                    elevation: 2,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(10),
                                    ),
                                    child: Padding(
                                      padding: const EdgeInsets.all(16),
                                      child: Row(
                                        children: [
                                          const Icon(
                                            Icons.medication,
                                            color: Colors.blueAccent,
                                          ),
                                          const SizedBox(width: 12),
                                          Expanded(
                                            child: Column(
                                              crossAxisAlignment:
                                                  CrossAxisAlignment.start,
                                              children: [
                                                Text(
                                                  reminder.medicine,
                                                  style: const TextStyle(
                                                    fontWeight: FontWeight.bold,
                                                    fontSize: 18,
                                                  ),
                                                ),
                                                Text(
                                                  '${reminder.dosage} • ${reminder.times.map((t) => t.format(context)).join(', ')}',
                                                  style: const TextStyle(
                                                    color: Colors.grey,
                                                    fontSize: 14,
                                                  ),
                                                ),
                                                Text(
                                                  '(${reminder.isDaily ? "Daily" : "Weekly"})',
                                                  style: const TextStyle(
                                                    color: Colors.grey,
                                                    fontSize: 12,
                                                  ),
                                                ),
                                                if (isCaretaker)
                                                  Row(
                                                    children: [
                                                      Checkbox(
                                                        value:
                                                            _takenStatus[reminder
                                                                .id] ??
                                                            false,
                                                        onChanged: (
                                                          bool? value,
                                                        ) {
                                                          setState(() {
                                                            _takenStatus[reminder
                                                                    .id] =
                                                                value ?? false;
                                                          });
                                                          _saveReminder(
                                                            reminder,
                                                          );
                                                        },
                                                      ),
                                                      const Text('Taken'),
                                                    ],
                                                  ),
                                              ],
                                            ),
                                          ),
                                          if (isCaretaker)
                                            IconButton(
                                              icon: const Icon(
                                                Icons.delete,
                                                color: Colors.red,
                                              ),
                                              onPressed:
                                                  () => setState(() {
                                                    _reminders.removeAt(index);
                                                    _takenStatus.remove(
                                                      reminder.id,
                                                    );
                                                    _deleteReminder(
                                                      reminder.id,
                                                    );
                                                  }),
                                            ),
                                        ],
                                      ),
                                    ),
                                  ),
                                );
                              },
                            ),
                          ),
                ),
        floatingActionButton:
            isCaretaker
                ? FloatingActionButton(
                  onPressed: _showAddReminderDialog,
                  backgroundColor: Colors.blueAccent,
                  child: const Icon(Icons.add),
                )
                : null,
      ),
    );
  }
}
